trigger:
    branches:
        include:
            - main
            - develop

pool:
    vmImageName: 'ubuntu-latest'

variables:
    ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
        - group: 'sample-dev-variables'
        - name: 'tag'
          value: 'dev'
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        - group: 'sample-prod-variables'
        - name: 'tag'
          value: 'prod'

stages:
- stage: Build
  displayName: 'Build Stage for $(Build.SourceBranchName)'
  jobs:
    - job: Build
      displayName: 'Build Function App'
      steps:
        - task: NuGetCommand@2
          displayName: 'Restore NuGet packages'
          inputs:
            command: 'restore'
            restoreSolution: '**/*.sln'
        - task: DotNetCoreCLI@2
          displayName: 'Build Function App'
          inputs:
            command: 'build'
            projects: '**/*.sln'
            arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        # - task: DotNetCoreCLI@2
        #   displayName: 'Publish Function App'
        #   inputs:
        #     command: 'publish'
        #     projects: '**/*.csproj'
        #     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-build'
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifacts'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage for $(Build.SourceBranchName)'
  dependsOn: Build
  jobs:
    - deployment: DeployFunctionApp
      displayName: 'Deploy Function App'
      environment: '$(tag)-functionapp-sampletest'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureFunctionApp@1
                displayName: 'Deploy to Azure Function App'
                inputs:
                  azureSubscription: '$(azureSubscription)'
                  appType: 'functionApp'
                  appName: '$(functionAppName)' # function app name
                  package: '$(Pipeline.Workspace)/drop'
                  appsettings: |
                    -name "FUNCTIONS_WORKER_RUNTIME" -value "dotnet"
                    -name "AzureWebJobsStorage" -value "$(AzureWebJobsStorage)"
                    -name "WEBSITE_RUN_FROM_PACKAGE" -value "1"
                  deploymentMethod: 'auto'